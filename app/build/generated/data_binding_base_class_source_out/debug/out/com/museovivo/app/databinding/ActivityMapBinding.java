// Generated by view binder compiler. Do not edit!
package com.museovivo.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.museovivo.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMapBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final LinearLayout bottomSheet;

  @NonNull
  public final MaterialButton btnBack;

  @NonNull
  public final MaterialButton btnCloseFilter;

  @NonNull
  public final MaterialButton btnLocation;

  @NonNull
  public final MaterialButton btnNavigate;

  @NonNull
  public final MaterialButton btnViewDetails;

  @NonNull
  public final MaterialCardView cardPointInfo;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipChurch;

  @NonNull
  public final ChipGroup chipGroupCategories;

  @NonNull
  public final Chip chipMuseum;

  @NonNull
  public final Chip chipPark;

  @NonNull
  public final Chip chipPlaza;

  @NonNull
  public final FloatingActionButton fabLayers;

  @NonNull
  public final FloatingActionButton fabZoomIn;

  @NonNull
  public final FloatingActionButton fabZoomOut;

  @NonNull
  public final ImageView ivPointImage;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView tvPointCategory;

  @NonNull
  public final TextView tvPointDescription;

  @NonNull
  public final TextView tvPointDistance;

  @NonNull
  public final TextView tvPointName;

  private ActivityMapBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull LinearLayout bottomSheet,
      @NonNull MaterialButton btnBack, @NonNull MaterialButton btnCloseFilter,
      @NonNull MaterialButton btnLocation, @NonNull MaterialButton btnNavigate,
      @NonNull MaterialButton btnViewDetails, @NonNull MaterialCardView cardPointInfo,
      @NonNull Chip chipAll, @NonNull Chip chipChurch, @NonNull ChipGroup chipGroupCategories,
      @NonNull Chip chipMuseum, @NonNull Chip chipPark, @NonNull Chip chipPlaza,
      @NonNull FloatingActionButton fabLayers, @NonNull FloatingActionButton fabZoomIn,
      @NonNull FloatingActionButton fabZoomOut, @NonNull ImageView ivPointImage,
      @NonNull MaterialToolbar toolbar, @NonNull TextView tvPointCategory,
      @NonNull TextView tvPointDescription, @NonNull TextView tvPointDistance,
      @NonNull TextView tvPointName) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.bottomSheet = bottomSheet;
    this.btnBack = btnBack;
    this.btnCloseFilter = btnCloseFilter;
    this.btnLocation = btnLocation;
    this.btnNavigate = btnNavigate;
    this.btnViewDetails = btnViewDetails;
    this.cardPointInfo = cardPointInfo;
    this.chipAll = chipAll;
    this.chipChurch = chipChurch;
    this.chipGroupCategories = chipGroupCategories;
    this.chipMuseum = chipMuseum;
    this.chipPark = chipPark;
    this.chipPlaza = chipPlaza;
    this.fabLayers = fabLayers;
    this.fabZoomIn = fabZoomIn;
    this.fabZoomOut = fabZoomOut;
    this.ivPointImage = ivPointImage;
    this.toolbar = toolbar;
    this.tvPointCategory = tvPointCategory;
    this.tvPointDescription = tvPointDescription;
    this.tvPointDistance = tvPointDistance;
    this.tvPointName = tvPointName;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.bottom_sheet;
      LinearLayout bottomSheet = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheet == null) {
        break missingId;
      }

      id = R.id.btn_back;
      MaterialButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btn_close_filter;
      MaterialButton btnCloseFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnCloseFilter == null) {
        break missingId;
      }

      id = R.id.btn_location;
      MaterialButton btnLocation = ViewBindings.findChildViewById(rootView, id);
      if (btnLocation == null) {
        break missingId;
      }

      id = R.id.btn_navigate;
      MaterialButton btnNavigate = ViewBindings.findChildViewById(rootView, id);
      if (btnNavigate == null) {
        break missingId;
      }

      id = R.id.btn_view_details;
      MaterialButton btnViewDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnViewDetails == null) {
        break missingId;
      }

      id = R.id.card_point_info;
      MaterialCardView cardPointInfo = ViewBindings.findChildViewById(rootView, id);
      if (cardPointInfo == null) {
        break missingId;
      }

      id = R.id.chip_all;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chip_church;
      Chip chipChurch = ViewBindings.findChildViewById(rootView, id);
      if (chipChurch == null) {
        break missingId;
      }

      id = R.id.chip_group_categories;
      ChipGroup chipGroupCategories = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupCategories == null) {
        break missingId;
      }

      id = R.id.chip_museum;
      Chip chipMuseum = ViewBindings.findChildViewById(rootView, id);
      if (chipMuseum == null) {
        break missingId;
      }

      id = R.id.chip_park;
      Chip chipPark = ViewBindings.findChildViewById(rootView, id);
      if (chipPark == null) {
        break missingId;
      }

      id = R.id.chip_plaza;
      Chip chipPlaza = ViewBindings.findChildViewById(rootView, id);
      if (chipPlaza == null) {
        break missingId;
      }

      id = R.id.fab_layers;
      FloatingActionButton fabLayers = ViewBindings.findChildViewById(rootView, id);
      if (fabLayers == null) {
        break missingId;
      }

      id = R.id.fab_zoom_in;
      FloatingActionButton fabZoomIn = ViewBindings.findChildViewById(rootView, id);
      if (fabZoomIn == null) {
        break missingId;
      }

      id = R.id.fab_zoom_out;
      FloatingActionButton fabZoomOut = ViewBindings.findChildViewById(rootView, id);
      if (fabZoomOut == null) {
        break missingId;
      }

      id = R.id.iv_point_image;
      ImageView ivPointImage = ViewBindings.findChildViewById(rootView, id);
      if (ivPointImage == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_point_category;
      TextView tvPointCategory = ViewBindings.findChildViewById(rootView, id);
      if (tvPointCategory == null) {
        break missingId;
      }

      id = R.id.tv_point_description;
      TextView tvPointDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvPointDescription == null) {
        break missingId;
      }

      id = R.id.tv_point_distance;
      TextView tvPointDistance = ViewBindings.findChildViewById(rootView, id);
      if (tvPointDistance == null) {
        break missingId;
      }

      id = R.id.tv_point_name;
      TextView tvPointName = ViewBindings.findChildViewById(rootView, id);
      if (tvPointName == null) {
        break missingId;
      }

      return new ActivityMapBinding((CoordinatorLayout) rootView, appBarLayout, bottomSheet,
          btnBack, btnCloseFilter, btnLocation, btnNavigate, btnViewDetails, cardPointInfo, chipAll,
          chipChurch, chipGroupCategories, chipMuseum, chipPark, chipPlaza, fabLayers, fabZoomIn,
          fabZoomOut, ivPointImage, toolbar, tvPointCategory, tvPointDescription, tvPointDistance,
          tvPointName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
