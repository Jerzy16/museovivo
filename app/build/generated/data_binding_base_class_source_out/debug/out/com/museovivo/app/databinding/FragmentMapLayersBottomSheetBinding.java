// Generated by view binder compiler. Do not edit!
package com.museovivo.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.museovivo.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMapLayersBottomSheetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnCloseLayers;

  @NonNull
  public final ChipGroup chipGroupLayers;

  @NonNull
  public final Chip chipHybrid;

  @NonNull
  public final Chip chipNormal;

  @NonNull
  public final Chip chipSatellite;

  @NonNull
  public final Chip chipTerrain;

  @NonNull
  public final GridLayout gridMapTypes;

  private FragmentMapLayersBottomSheetBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnCloseLayers, @NonNull ChipGroup chipGroupLayers,
      @NonNull Chip chipHybrid, @NonNull Chip chipNormal, @NonNull Chip chipSatellite,
      @NonNull Chip chipTerrain, @NonNull GridLayout gridMapTypes) {
    this.rootView = rootView;
    this.btnCloseLayers = btnCloseLayers;
    this.chipGroupLayers = chipGroupLayers;
    this.chipHybrid = chipHybrid;
    this.chipNormal = chipNormal;
    this.chipSatellite = chipSatellite;
    this.chipTerrain = chipTerrain;
    this.gridMapTypes = gridMapTypes;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMapLayersBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMapLayersBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_map_layers_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMapLayersBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_close_layers;
      MaterialButton btnCloseLayers = ViewBindings.findChildViewById(rootView, id);
      if (btnCloseLayers == null) {
        break missingId;
      }

      id = R.id.chip_group_layers;
      ChipGroup chipGroupLayers = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupLayers == null) {
        break missingId;
      }

      id = R.id.chip_hybrid;
      Chip chipHybrid = ViewBindings.findChildViewById(rootView, id);
      if (chipHybrid == null) {
        break missingId;
      }

      id = R.id.chip_normal;
      Chip chipNormal = ViewBindings.findChildViewById(rootView, id);
      if (chipNormal == null) {
        break missingId;
      }

      id = R.id.chip_satellite;
      Chip chipSatellite = ViewBindings.findChildViewById(rootView, id);
      if (chipSatellite == null) {
        break missingId;
      }

      id = R.id.chip_terrain;
      Chip chipTerrain = ViewBindings.findChildViewById(rootView, id);
      if (chipTerrain == null) {
        break missingId;
      }

      id = R.id.grid_map_types;
      GridLayout gridMapTypes = ViewBindings.findChildViewById(rootView, id);
      if (gridMapTypes == null) {
        break missingId;
      }

      return new FragmentMapLayersBottomSheetBinding((LinearLayout) rootView, btnCloseLayers,
          chipGroupLayers, chipHybrid, chipNormal, chipSatellite, chipTerrain, gridMapTypes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
